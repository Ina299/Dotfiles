Info file: textutils-ja.info,    -*-Text-*-
produced by `texinfo-format-buffer'
from file `textutils-ja.texi'
using `texinfmt.el' version 2.38 of 3 July 1998.






START-INFO-DIR-ENTRY
* Text utilities(ja): (textutils-ja).           GNU text utilities.
* cat(ja): (textutils-ja)cat invocation.        Concatenate and write files.
* cksum(ja): (textutils-ja)cksum invocation.    Print POSIX CRC checksum.
* comm(ja): (textutils-ja)comm invocation.      Compare sorted files by line.
* csplit(ja): (textutils-ja)csplit invocation.  Split by context.
* cut(ja): (textutils-ja)cut invocation.        Print selected parts of lines.
* expand(ja): (textutils-ja)expand invocation.  Convert tabs to spaces.
* fmt(ja): (textutils-ja)fmt invocation.        Reformat paragraph text.
* fold(ja): (textutils-ja)fold invocation.      Wrap long input lines.
* head(ja): (textutils-ja)head invocation.      Output the first part of files.
* join(ja): (textutils-ja)join invocation.      Join lines on a common field.
* md5sum(ja): (textutils-ja)md5sum invocation.  Print or check message-digests.
* nl(ja): (textutils-ja)nl invocation.          Number lines and write files.
* od(ja): (textutils-ja)od invocation.          Dump files in octal, etc.
* paste(ja): (textutils-ja)paste invocation.    Merge lines of files.
* pr(ja): (textutils-ja)pr invocation.          Paginate or columnate files.
* ptx(ja): (textutils-ja)ptx invocation.        Produce permuted indexes.
* sort(ja): (textutils-ja)sort invocation.      Sort text files.
* split(ja): (textutils-ja)split invocation.    Split into fixed-size pieces.
* sum(ja): (textutils-ja)sum invocation.        Print traditional checksum.
* tac(ja): (textutils-ja)tac invocation.        Reverse files.
* tail(ja): (textutils-ja)tail invocation.      Output the last part of files.
* tsort(ja): (textutils-ja)tsort invocation.    Topological sort.
* tr(ja): (textutils-ja)tr invocation.          Translate characters.
* unexpand(ja): (textutils-ja)unexpand invocation.  Convert spaces to tabs.
* uniq(ja): (textutils-ja)uniq invocation.      Uniquify files.
* wc(ja): (textutils-ja)wc invocation.          Byte, word, and line counts.
END-INFO-DIR-ENTRY

This file documents the GNU text utilities.

Copyright (C) 1994, 95, 96 Free Software Foundation, Inc.

Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the
entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be stated in a translation
approved by the Foundation.





File: textutils-ja.info, Node: ptx invocation, Prev: tsort invocation, Up: Operating on sorted files

`ptx': 並べ替えた索引の生成
===========================


`ptx'は，テキストファイルを読み込み，その内容のそれぞれのキーワードを用
いて，並べ替えられた索引を本来は生成します．呼び出しの形態は以下の1 つで
す．

     ptx [OPTION ...] [FILE ...]
     ptx -G [OPTION ...] [INPUT [OUTPUT]]

`-G'(または同等の: `--traditional')オプションは，全てのGNU拡張を利用不可
にし，伝統的なモードに切替え，そのため，いくつかの制限と，プログラムのオ
プションデフォルト値を変更します．`-G'が指定されていない場合，GNU拡張は
常に利用可能です．`ptx'のGNU拡張は，このドキュメントに適切に文章化されて
います．完全なリストは，*Note Compatibility in ptx::.

個別のオプションは，以下のセクションで説明されます．

GNU拡張が利用可能なとき，ゼロ，1つまたは複数のFILEが，オプションの後にあ
ります．FILEが無い場合，プログラムは標準入力から読み込みます．1つまたは
複数FILEある場合，全ての入力ファイルが連結されているかのように，その回で
全て読み込まれる入力ファイル名を与えます．しかし，それぞれのファイルの間
に完全に文脈の終りが有り，自動的な参照が要求されるとき，ファイル名と行番
号は，入力ファイルの個別のテキストを参照します．全ての場合で，プログラム
は並べ替えられた索引を標準出力に書き出します．

GNU拡張が利用可能で*ない*とき，すなわち，伝統的なモードでプログラムが動
作しているとき，ゼロ，1つまたは2つのパラメータがオプションの後にあります．
パラメータが無い場合，プログラムは標準入力を読み込み，標準出力に並べ替え
た索引を生成します．1つのパラメータのみの場合，それは標準入力の代わりに
読み込まれるテキストINPUTを指名します．2つのパラメータが与えられた場合，
それらはそれぞれ，読み込まれるINPUTファイル名と，生成するOUTPUTファイル
名を与えます．この場合，2番目のパラメータとして与えられるファイルの内容
が壊れることに*十分注意して*ください．この動作は，出力パラメータを妨げる
GNU標準がオプションで導入されたのではないので，System V `ptx'互換のみに
より規定されています．

*あらゆる*ファイルは，オプション値や入力テキストファイルとして指名され，
単一のダッシュ`-'は使用でき，その場合標準入力と考えられます．しかし，プ
ログラムの呼び出しに1回以上，この慣習を使用する意味はありません．

* Menu:

* General options in ptx::      Options which affect general program behaviour.
* Charset selection in ptx::    Underlying character set considerations.
* Input processing in ptx::     Input fields, contexts, and keyword selection.
* Output formatting in ptx::    Types of output format, and sizing the fields.
* Compatibility in ptx::




File: textutils-ja.info, Node: General options in ptx, Next: Charset selection in ptx, Prev: ptx invocation, Up: ptx invocation

一般的なオプション
------------------


`-C'
`--copyright'
     著作権とコピー条件の短いメモを出力し，それ以上何も処理せず終了しま
     す．

`-G'
`--traditional'
     既に拡張されているので，このオプションは，`ptx'に対する全てのGNU拡
     張を利用不可にし，伝統的なモードに切替えます．

`--help'
     短いヘルプを標準出力に出力し，それ以上何も処理せず終了します．

`--version'
     プログラムのバージョンを標準出力に出力し，それ以上何も処理せずに終
     了します．




File: textutils-ja.info, Node: Charset selection in ptx, Next: Input processing in ptx, Prev: General options in ptx, Up: ptx invocation

文字セットの選択
----------------

現在セットアップされているので，プログラムは，入力ファイルが8ビットISO
8859-1コードを使用して符号化されていると考え，Latin-1文字セットだという
ことも分かりますが，それは，MS-DOSでコンパイル*されていない場合*で，その
場合はIBM-PCの文字セットを使用します．(GNU `ptx'は，より小さいMS-DOSマシ
ンで働く方法を知りません．) 7-bit ASCIIに比べて，文字である文字セットは
異なっていて，この事実は正規表現の一致の動作を変更します．そのため，キー
ワードに対するデフォルトの正規表現で，外国や発音記号の文字が可能となりま
す．しかし，キーワードのソートはそのままです．それは，全く盲目的に基礎的
な文字セットの順序に従います．


`-f'
`--ignore-case'
     ソートに対し，小文字を大文字にまとめます．




File: textutils-ja.info, Node: Input processing in ptx, Next: Output formatting in ptx, Prev: Charset selection in ptx, Up: ptx invocation

単語の選択と入力の処理
----------------------


`-b FILE'
`--break-file=FILE'

     このオプションは，単語を生成する文字の記述方法(`-W')の代替物を提供
     します．それは，単語の部分にならない文字のリストを含むファイル名を
     導入し，このファイルは"ブレークファイル"と呼ばれます．ブレークファ
     イルの一部でないあらゆる文字は単語の要素です．`-b'と`-W'を両方指定
     した場合，`-W'が優先され`-b'は無視されます．

     GNU拡張が利用可能な場合，改行をブレーク文字とすることを避ける唯一の
     方法で，ファイルの終りにさえ改行が全く無いファイルに，全てのブレー
     ク文字を書くことでできます．GNU拡張が利用不可能な場合，スペース，タ
     ブ，改行は，ブレークファイルの含まれている場合でさえ，常にブレーク
     文字と考えます．

`-i FILE'
`--ignore-file=FILE'

     このオプションで関連付けられたファイルは，用語索引の出力でキーワー
     ドとされない単語のリストを含みます．それは"無視ファイル"と呼ばれま
     す．ファイルは，正確にそれぞれの行に1単語を含みます．単語を分ける行
     の終りは，`-S'オプションの値を適用されません．

     このオプションが指定されない場合，デフォルトの無視ファイルは`ptx'が
     使用され，インストール時に変更されていない場合，通常は
     `/usr/local/lib/eign'で見つかります．デフォルトの無視ファイルの影響
     を無くしたい場合，代わりに`/dev/null'を指定してください．

`-o FILE'
`--only-file=FILE'

     このオプションで関連付けられたファイルは，用語索引の出力に維持され
     る単語のリストを含み，このファイルで述べれいないあらゆる単語は無視
     されます．ファイルは"オンリーファイル"と呼ばれています．ファイルは，
     正確にそれぞれの行に1単語を含みます．単語を分ける行の終りは，`-S'オ
     プションの値を適用されません．

     オンリーファイルにデフォルトはありません．オンリーファイルと無視ファ
     イルの両方にある場合，オンリーファイルで与えられ，無視ファイルで与
     えられない単語のみキーワードに適用されます．

`-r'
`--references'

     それぞれの入力行で，空白文字でない前置された並びは，生成され並べ替
     えされた索引の，この入力行を識別する目的を持つ参照として受け入れま
     す．参照生成に関するより多くの情報は，*Note Output formatting in
     ptx::.  このオプションの使用で，オプション`-S'に対するデフォルト値
     を変更します．

     このオプションの使用で，プログラムは出力の文脈からの参照の削除の試
     みが非常に難しくなりますが，文脈の終りが正確に改行で終る*とき*，そ
     うすることに成功します．オプション`-r'が`-S'デフォルト値とともに使
     用された場合や，GNU拡張が利用不可能なとき，この条件は常に満たされ，
     参照は完全に出力文脈から除外されます．

`-S REGEXP'
`--sentence-regexp=REGEXP'

     このオプションは，行末や文の終りを記述する正規表現を選択します．実
     際，この正規表現の効果以外に，行末や文の終わりのには他の区別があり，
     入力行の境界は，このオプションの外で特別な重要性はありません．デフォ
     ルトで，GNU拡張が使用可能なときや，`-r'オプションが使用されていない
     場合，文の終りが使用されます．この場合，正確なREGEXはGNU emacsから
     取り込まれます．

          [.?!][]\"')}]*\\($\\|\t\\|  \\)[ \t\n]*

     GNU拡張が使用不可能なときや，`-r'オプションが使用されている場合は，
     常に行の終りが使用され，この場合デフォルトのREGEXPは以下のようにな
     ります．

          \n

     空のREGEXPの使用は，行末と文の終りの認識を完全に不可能にすることと
     同等です．この場合，ファイル全体が単一の大きな行や文と考えられます．
     ユーザは，オプション`-F ""'を通じて，全ての切り詰めフラグの生成を，
     不許可にしたい場合もあります．*Note Syntax of Regular Expressions:
     (emacs)Regexps.

     キーワードが入力行や文の最初で発生したとき，出力文脈の行の最初に利
     用されない領域を作成することが良くあります．キーワードが入力行や文
     の終り近くで発生したとき，出力文脈の行の終りに利用されない領域を作
     成することが良くあります．プログラムは，その中の文脈の周りを包むこ
     とで，それらの領域を補充しようとします．入力行や文の頭は，出力行の
     右の利用されていない行を補充するために使用されます．

     ユーザの利便性の問題として，C言語で見つかる，多くの通常のバックスラッ
     シュされたエスケープ・シーケンスは認識され，`ptx'自身によって対応す
     る文字に変換されます．

`-W REGEXP'
`--word-regexp=REGEXP'

     このオプションは，それぞれのキーワードを記述している正規表現を選択
     します．デフォルトで，GNU拡張が利用可能な場合，単語は文字の並びです．
     使用されるREGEXPは`\w+'です．GNU拡張が利用不可能な場合，単語はデフォ
     ルトで，スペース，タブ，または改行で終るあらゆるものです．使用され
     るREGEXPは`[^ \t\n]+'です．

     空のREGEXPは，このオプションを使用しないのと同等で，デフォルト動作
     になります．*Note Syntax of Regular Expressions: (emacs)Regexps.

     ユーザの利便性の問題として，C言語で見つかる，多くの通常のバックスラッ
     シュされたエスケープ・シーケンスは認識され，`ptx'自身によって対応す
     る文字に変換されます．





File: textutils-ja.info, Node: Output formatting in ptx, Next: Compatibility in ptx, Prev: Input processing in ptx, Up: ptx invocation

出力の書式
----------

出力書式は，主に`-O'と`-T'オプションで制御され，それは以下の表で記述され
ています．`-O'も`-T'も選択されていないときで，GNU拡張が利用可能な場合，
プログラムは dumb 端末に適した出力書式を選択します．それぞれのキーワード
の発生は，出力を行の中心にし，周りをその左右の文脈で囲います．それぞれの
フィールドは適切に正当化されるので，用語索引の出力は容易に観察できます．
特別な特徴として，自動的な参照がオプション`-A' で指定されていて，左の文
脈の前に出力されている，すなわち，オプション`-R'が選択されて*いない*場合，
コロンが参照の後に追加されます．これは，GNU Emacsが`next-error'を処理す
ることでうまく作用します．このデフォルト出力書式では，改行やタブのような
それぞれの空白文字は，正確に1つのスペースに単に変換され，連続したスペー
スの圧縮は特に試みません．これは将来変更されるかも知れません．これらの空
白文字以外の，256文字の基本セットの全ての他の文字は逐語的に転送されます．

出力書式は，以下のオプションで更に制御されます．


`-g NUMBER'
`--gap-size=NUMBER'

     出力行のフィールド間の最小の空白の隙間を選択します．

`-w NUMBER'
`--width=NUMBER'

     それぞれの最終行の出力最大幅を選択します．参照が使用される場合，
     `-R'オプションの値に依存して，それらは出力最大幅に含められたり省か
     れたりします．これらのオプションが選択されていない場合，すなわち，
     参照が左の文脈の前に出力されるとき，出力最大幅は全ての参照の最大長
     まで考慮に入れられます．このオプションが選択された場合，すなわち，
     参照が右の文脈の後に出力されるとき，出力最大幅は参照が使用するスペー
     スの量も，前にある隙間も考慮に入れられません．

`-A'
`--auto-reference'

     自動的な参照を選択します．それぞれの入力行は，ファイル名と間に単一
     のコロンを用いた行の序数で作成された自動的な参照を持ちます．しかし，
     標準入力が読み込まれているときは，ファイル名は空です．`-A'と`-r'の
     両方が選択された場合，入力参照は読み込まれスキップされますが，自動
     的な参照は出力時に利用され，それは入力参照に優先します．

`-R'
`--right-side-refs'

     デフォルト出力書式で，オプション`-R'が使用されていないとき，オプショ
     ン`-r'や`-A'の影響で生成されるあらゆる参照は，右の文脈の後に，出力
     行の右端に与えられます．デフォルト出力書式で，オプション`-R'が指定
     された場合，参照は，左の文脈の前に，それぞれの出力行の始めに代わり
     に与えられます．それ以外のあらゆる出力書式に対し，`-R'が選択された
     ときは常に，参照の幅が`-w'で与えられた全体の出力幅に含まれ*ない* と
     いう事実以外，オプション`-R'はほとんど無視されます．

     GNU拡張が利用不可能なときは，常にこのオプションは自動的に選択されま
     す．

`-F STRING'
`--flac-truncation=STRING'

     このオプションは，文字列STRINGの使用が報告された出力での，あらゆる
     切り詰めを要求します．ほとんどの出力フィールドは，オプション`-S'が
     選択されたのと同様に，現在の行や現在の文の始めや終りに向かって，理
     論的に展開されます．しかし，許可される出力行幅の最大値は存在し，オ
     プション`-w'で変更でき，それは様々な出力フィールドに対しスペースで
     更に分割されます．現在の行に適するよう，その行の最初や終りまで拡張
     することができないため，フィールドが切り詰める必要があるとき，切り
     詰めが発生します．デフォルトで，使用される文字列は単一のスラッシュ
     で，`-F /'のようになります．

     STRINGは1文字以上が可能で，`-F ...'のようになります．また，STRINGが
     空(`-F ""')となる特定の場合，切り詰めフラグは利用不可能で，切り詰め
     マークはこの場合現われません．

     ユーザの利便性の問題として，多くの通常の，C言語で見つかる，バックス
     ペースされたエスケープ・シーケンスは認識され，`ptx'自身によって，対
     応する文字に変換されます．

`-M STRING'
`--macro-name=STRING'

     `nroff'，`troff'やTeXに適した出力を生成している間，`xx'の代わりに，
     使用する他のSTRINGを選択します．

`-O'
`--format=roff'

     `nroff'や`troff'の処理に適した出力書式を選択します．それぞれの出力
     行は以下のようになります．

          .xx "TAIL" "BEFORE" "KEYWORD_AND_AFTER" "HEAD" "REF"

     それで，出力の植字を処理するための，`.xx' roffマクロを書くことが可
     能になります．GNU拡張が利用不可能な場合，これはデフォルト出力です．
     オプション`-M'は，`xx'を他のマクロ名に変更するために利用可能です．

     この出力形式で，改行やタブのようなそれぞれの表示不可能な文字は，連
     続したスペースを圧縮するという特別な試みを行わず，正確に1つのスペー
     スに単に変換されます．それぞれの引用文字：`"'は2重になるので，
     `nroff'や`troff'で正しく処理されます．

`-T'
`--format=tex'

     TeXでの処理に適した出力書式を選択します．それぞれの出力行は以下のよ
     うになります．

          \xx {TAIL}{BEFORE}{KEYWORD}{AFTER}{HEAD}{REF}

     それで，出力の植字の処理するための`\xx'定義を書くことが可能になりま
     す．参照が生成されないとき，すなはち，オプション`-A'もオプション
     `-r'も選択されていないとき，それぞれの`\xx'の最後のパラメータが抑制
     されることに注意してください．オプション`-M'は，`xx'を他のマクロ名
     に変更するために利用可能です．

     この出力書式では，`$'，`%'，`&'，`#'そして`_'のような，いくつかの特
     殊文字は，自動的にバックスラッシュで保護されます．弓カッコの`{'，
     `}'もバックスラッシュで保護されますが，数学モードを強制するドル記号
     の組でも囲まれます．バックスラッシュ自身は`\backslash{}'の並びを生
     成します．曲折アクセント記号とティルデ分音記号は，`^\{ }'と`~\{ }'
     の並びをそれぞれ生成します．その他の基礎となる文字セットの分音文字
     は，適切なTeXの並びを可能な限り生成します．改行とタブのようなその他
     の表示不可能な文字と，ASCIIではない全ての他の文字は，連続したスペー
     スを圧縮するという特別な試みを行わず，1 つのスペースに単に変換され
     ます．これらの特殊文字をTeXで処理する改善方法を知らせてください．





File: textutils-ja.info, Node: Compatibility in ptx, Prev: Output formatting in ptx, Up: ptx invocation

`ptx'のGNU拡張
--------------

この`ptx'のバージョンには，System V `ptx'には存在しないいくつかの特徴が
あります．これらの拡張された特徴は，他のコマンドラインオプションで優先さ
れない場合，`-G'コマンドラインオプションを使用して抑制されます．GNU拡張
には，優先で元に戻すことができないものがあり，そのため，GNU拡張を気にす
る場合，簡単な規則で`-G'を避けるはずです．ここに，このプログラムとSystem
V `ptx'の間の違いがあります．


   * このプログラムは，一度に多くの入力ファイルを読むことが可能で，それ
     は常に，用語索引の結果を標準出力に書き出します．一方，System V
     `ptx'は，1つのみファイルを読み込み，結果を標準出力に書き出すか，2番
     目のFILEパラメータがコマンドで与えられている場合は，そのFILEに書き
     出します．

     オプションで導入されない出力パラメータがあるということは，GNUができ
     る限り避ける全く危険な操作です．そのため，GNUとSystem Vの間の移植性
     のある`ptx'を使用するため，単一の入力ファイルで常に使用することに注
     意を払い，常に標準出力で結果を期待するべきです．配置するものが`-G'
     を受け入れる`ptx'がインストールされていることが分かった場合，`ptx'
     を使用した製品での`ptx'の呼び出しで，`-G'オプションを自動的に配置し
     たいと思うかもしれません．

   * System V `ptx'でのみ利用可能なオプションは，`-b'，`-f'，`-g'，`-i'，
     `-o'，`-r'，`-t'と`-w'です．全ての他のオプションはGNU拡張で，この列
     挙では繰り返しません．さらに，GNU拡張が利用可能なとき，わずかに意味
     が異なるオプションもあり，以下で記述します．

   * デフォルトで，用語索引出力は`troff'や`nroff'に対して書式化されませ
     ん．それはむしろ，dumb端末に対する出力です．`troff'や`nroff'の出力
     は，オプション`-O'を通じて選択可能です．

   * `-R'オプションが選択されない場合，最大の参照幅は出力行幅全体から引
     いたものになります．GNU拡張が利用不可能な場合，参照の幅は出力行の幅
     の計算で考慮されません．

   * `NUL'を含む256文字全ては，たとえGNU拡張が利用不可能な場合でも，常に
     入力ファイルから読み込まれ，不利な効果もなく処理されます．しかし，
     System V `ptx'は8ビット文字を受け入れず，いくつかの制御文字は削除さ
     れ，チルダ`~'は処分されます．

   * 入力行の長さは，GNU拡張が利用できない場合でさえ，利用可能なメモリで
     のみ制限されます．しかしSystem V `ptx'は，それぞれの行の最初の200文
     字のみ処理します．

   * ブレーク(noord)文字は，全ての基礎となる文字セット以外，分音記号の有
     無によらず，全ての文字をデフォルトとします．GNU拡張が利用不可能なと
     き，ブレーク文字は，スペース，タブと改行のみをデフォルトとします．

   * プログラムは，出力行の幅でより良いものを使用します．GNU拡張が利用不
     可能な場合，プログラムは，代わりにSystem V `ptx'を模倣しようとしま
     すが，このプログラムが完全に再現していない，わずかな配置不備もまだ
     あります．

   * ユーザは，IgnoreファイルとOnlyファイルの両方を指定できます．これは，
     System V `ptx'では許可されません．





File: textutils-ja.info, Node: Operating on fields within a line, Next: Operating on characters, Prev: Operating on sorted files, Up: Top

行のフィールドの処理
********************

* Menu:

* cut invocation::              Print selected parts of lines.
* paste invocation::            Merge lines of files.
* join invocation::             Join lines on a common field.




File: textutils-ja.info, Node: cut invocation, Next: paste invocation, Prev: Operating on fields within a line, Up: Operating on fields within a line

`cut': 行の選択した部分の出力
=============================

`cut'は，それぞれの入力ファイルや，ファイルが与えられない場合や`-'のファ
イル名に対しては標準入力の，それぞれの行の選択された部分を標準出力に書き
出します．概要です．

     cut [OPTION]... [FILE]...

以下の表で，BYTE-LIST，CHARACTER-LISTと，FIELD-LISTは，1つ以上の数字また
はカンマで分けられた(ダッシュで分けられた2つの数字の)範囲です．バイト，
文字と，フィールドは，1で始まる番号がつきます．不完全な範囲を与えること
ができます．`-M'は`1-M'を意味します．`N-'は，`N'から行末やフィールドの終
りまでを意味します．

このプログラムは以下のオプションも受け入れます．*Note Common options::,
も参照してください．


`-b BYTE-LIST'
`--bytes=BYTE-LIST'
     BYTE-LISTでリストアップされた位置にあるバイトのみを出力します．タブ
     とバックスペースは他の文字と同様に扱われます．それらは1バイト使用し
     ます．

`-c CHARACTER-LIST'
`--characters=CHARACTER-LIST'
     CHARACTER-LISTにリストアップされた位置にある文字のみを出力します．
     現在は`-b'と同じですが，国際化はそれを変更する可能性があります．タ
     ブとバックスペースは他の文字と同様に扱われます．それらは1バイト使用
     します．

`-f FIELD-LIST'
`--fields=FIELD-LIST'
     FIELD-LISTにリストアップされたフィールドのみを出力します．デフォル
     トで，フィールドはTAB文字で分けられています．

`-d INPUT_DELIM_BYTE'
`--delimiter=INPUT_DELIM_BYTE'
     `-f'に対し，フィールドは，INPUT_DELIM_BYTEの最初の文字により，入力
     で分けられます(デフォルトはTABです)．

`-n'
     マルチバイトの文字を分けません(現在何もしません)．

`-s'
`--only-delimited'
     `-f'に対し，フィールド分離文字を含まない列を出力しません．

`--output-delimiter=OUTPUT_DELIM_STRING'
     `-f'に対し，出力フィールドは，OUTPUT_DELIM_STRINGで分けられます．デ
     フォルトは入力分離文字を使用します．





File: textutils-ja.info, Node: paste invocation, Next: join invocation, Prev: cut invocation, Up: Operating on fields within a line

`paste': ファイルの行を統合します
=================================


`paste'は，与えられたそれぞれファイルの連続して対応している行から成り立
つ行を標準出力に書き出し，それはTAB文字で分けられています．`-' のファイ
ル名や，入力ファイルが与えられない場合，標準入力が使用されます．

概要です．

     paste [OPTION]... [FILE]...

プログラムは以下のオプションを受け入れます．*Note Common options::,も参
照してください．


`-s'
`--serial'
     それぞれのファイルから1行ではなく，1度に1つのファイルの行をペースト
     します．

`-d DELIM-LIST'
`--delimiters DELIM-LIST'
     統合される行の分離のTABの代わりに，DELIM-LISTの文字を順番に使用しま
     す．DELIM-LISTが使い尽くされたとき，その最初で再び開始します．





File: textutils-ja.info, Node: join invocation, Prev: paste invocation, Up: Operating on fields within a line

`join': 共通のフィールドで行を結合
==================================


`join'は，同一の結合したフィールドを持つそれぞれの入力行の組の行を標準出
力に書き出します．概要です．

     join [OPTION]... FILE1 FILE2

FILE1またはFILE2は(両方ではなく)`-'が可能で，標準入力を意味します．FILE1
とFILE2は，結合したフィールド上で増加している，原文通りの順番で既に保存
されているべきで，それは，`LC_COLLATE'ロケールで指定された，対照の順序を
使用します．`-t'オプションが与えられていない場合，入力は，`sort -b'で，
結合フィールドの最初の空白を無視して保存されているべきです．
`--ignore-case'オプションが与えられた場合，行は`sort -f'で，結合フィール
ドの文字の大文字小文字に関係なくソートされているべきです．

デフォルトは，以下の通りです．結合フィールドは，それぞれの行の最初のフィー
ルドです．入力のフィールドは，1つ以上の空白で分かれていて，行の前の空白
は無視されます．出力のフィールドはスペースで分けられています．それぞれの
出力行は，結合フィールド，FILE1からの残りのフィールド，それから，FILE2の
残りのフィールドから成り立ちます．

プログラムは，以下のオプションを受け入れます．*Note Common options::,も
参照してください．


`-a FILE-NUMBER'
     ファイルFILE-NUMBER (`1'または`2'のいずれか)で組になっていないそれ
     ぞれの行に対し，1行を通常の出力に追加して出力します．

`-e STRING'
     入力で欠けているこれらの出力フィールドを，STRINGで置換します．

`-i'
`--ignore-case'
     キーを比較するとき，大文字小文字の違いを無視します．このオプション
     を用いた場合，入力ファイルの行は同じ方法でソートされている必要があ
     ります．この順序を生成するために，`sort -f'を使用してください．

`-1 FIELD'
`-j1 FIELD'
     ファイル1のフィールドFIELD (正の整数)で結合します．

`-2 FIELD'
`-j2 FIELD'
     ファイル2のフィールドFIELD (正の整数)で結合します．

`-j FIELD'
     `-1 FIELD -2 FIELD'と同じです．

`-o FIELD-LIST...'
     FIELD-LISTの書式に従い，それぞれの出力行を生成します．FIELD-LISTの
     それぞれの要素は，単一文字`0'，または，ファイル番号のMが`1'または
     `2'で，Nが正のフィールド番号となるM.Nの形式になります．

     `0'のフィールド指定は，結合フィールドを示します．ほとんどの場合，
     `0'フィールドの指定の機能は，対応する結合フィールドとなる，明示的な
     M.Nを用いて再現できます．しかし，(`-a'または`-v'オプションを用いて)
     組にならない行を出力するとき，両方のファイルで組にならない行がある
     場合，FIELD-LISTでM.Nを用いて結合フィールドを指定する方法はありませ
     ん．`join'にその機能を与えるため，POSIXは`0'フィールド指定の表記を
     考え出しました．

     FIELD-LISTの要素は，カンマまたは空白で分けられています．複数の
     FIELD-LIST引数で，単一の`-o'オプションの後に与えることができます．
     `-o'で与えられる全てのリストの値は，一緒に連結されます．全ての出力
     行は--`-a'や`-v'オプションで出力されるものを含め--指定された
     FIELD-LISTを適用されます．

`-t CHAR'
     文字CHARを入出力のフィールドセパレータとして使用します．

`-v FILE-NUMBER'
     通常の出力の代わりに，ファイルFILE-NUMBER (1または2)の組にならない
     それぞれの行に対し，1行を出力します．


更に，GNU `join'が1つの引数で呼び出された場合，オプション`--help'と
`--version'は認識されます．*Note Common options::.



File: textutils-ja.info, Node: Operating on characters, Next: Opening the software toolbox, Prev: Operating on fields within a line, Up: Top

文字の処理
**********


このコマンドは，個別に文字を処理します．

* Menu:

* tr invocation::               Translate, squeeze, and/or delete characters.
* expand invocation::           Convert tabs to spaces.
* unexpand invocation::         Convert spaces to tabs.




File: textutils-ja.info, Node: tr invocation, Next: expand invocation, Prev: Operating on characters, Up: Operating on characters

`tr': 文字の変換，圧縮，そして/または，削除
===========================================


概要です．

     tr [OPTION]... SET1 [SET2]

`tr'は標準入力を標準出力にコピーし，そのとき以下の処理の一つを実行します．

   * 変換と，追加で結果の繰り返し文字の圧縮．
   * 繰り返し文字の圧縮．
   * 文字の削除．
   * 文字の削除後，結果から繰り返し文字の圧縮．

SET1と(与えられている場合)SET2引数は，文字の順序を持つ文字を定義し，以下
のSET1とSET2を参照します．これらの設定は，`tr'が処理する入力文字です．
`--complement' (`-c')オプションは，SET1をその補語(SET1にない全ての文字)
に置換します．

* Menu:

* Character sets::              Specifying sets of characters.
* Translating::                 Changing one characters to another.
* Squeezing::                   Squeezing repeats and deleting.
* Warnings in tr::              Warning messages.




File: textutils-ja.info, Node: Character sets, Next: Translating, Prev: tr invocation, Up: tr invocation

文字セットの指定
----------------


SET1とSET2の引数の書式は，正規表現の書式に似ています．しかし正規表現では
なく，文字のリストのみです．これらの文字列のほとんどの文字は単にその文字
自身を表すが，利便性のため，文字列には以下でリストアップされた速記を含む
ことができます．そのうち，以下で注意するSET1またはSET2のみでしか利用でき
ないものもあります．


バックスラッシュエスケープ


     以下でリストアップされていない，文字が続くバックスラッシュは，エラー
     メッセージを発生します．

     `\a'
          Control-G.
     `\b'
          Control-H.
     `\f'
          Control-L.
     `\n'
          Control-J.
     `\r'
          Control-M.
     `\t'
          Control-I.
     `\v'
          Control-K.
     `\OOO'
          OOOで与えられる値の文字で，1から3桁までの8進数．
     `\\'
          バックスラッシュ．

範囲


     表記方法の`M-N'は，MからNまで昇順に，全ての文字に展開されます．Mは，
     対照でNの前であるべきです．そうでない場合，結果としてエラーとなりま
     す．例としては，`0-9'は`0123456789'と同じです．GNU `tr'は，範囲を囲
     む角括弧を使用するSystem V 構文をサポートしませんが，その書式で指定
     された変換は，SET1のカッコがSET2のカッコと同じように対応する限り働
     きます．

繰り返される文字

     SET2での`[C*N]'の表記は，文字CのN個のコピーに展開されます．このため，
     `[y*6]'は`yyyyyy'と同じです．SET2での`[C*]'の表記は，SET2をSET1と同
     じ長さにするのに必要なだけ，Cの多くのコピーに展開されます．Nが`0'で
     始まる場合は8進数に，それ以外では10進数に解釈されます．

文字クラス

     `[:CLASS:]'の表記は，(あらかじめ定義された)クラスCLASS にある全ての
     文字に展開されます．文字は，特定の順序で展開されませんが，`upper'と
     `lower'クラスは，昇順に展開されます．`--delete' (`-d')と
     `--squeeze-repeats' (`-s')オプションが両方与えられた場合，あらゆる
     文字クラスはSET2で使用されるはずです．それ以外の場合，文字クラス
     `lower'と`upper'は，SET2に適用され，そしてそれは，対応する(それぞれ
     `upper'と`lower'の)文字クラスはSET1の位置に関連して同じものが指定さ
     れている場合のみです．こうすることで，大文字小文字の変換を指定しま
     す．クラス名は以下で与えられます．無効なクラス名が与えられた場合，
     結果としてエラーとなります．

     `alnum'
          文字と数字．
     `alpha'
          文字．
     `blank'
          水平方向の空白．
     `cntrl'
          コントロール文字．
     `digit'
          数字．
     `graph'
          スペースを含まない，印刷可能な文字．
     `lower'
          小文字．
     `print'
          スペースを含む，印刷可能な文字．
     `punct'
          句読点文字．
     `space'
          水平垂直の空白．
     `upper'
          大文字．
     `xdigit'
          16進数の数字．

等価なクラス

     構文`[=C=]'は，Cと等価な文字の全てに，特定の順序を持たずに展開され
     ます．等価なクラスは，英語以外のアルファベットをサポートする目的で，
     比較的最近発明されました．しかし，それらの定義や内容を決定する標準
     的な方法はなさそうです．それゆえ，GNU `tr'では，完全には実装されて
     いません．それぞれの文字の等価クラスは，その文字からのみ構成されて
     いて，特定の利用価値はありません．





File: textutils-ja.info, Node: Translating, Next: Squeezing, Prev: Character sets, Up: tr invocation

変換
----


SET1とSET2の両方が与えられ，`--delete' (`-d')オプションが与えられていな
い場合，`tr'は変換を実行します．`tr'は，SET1にある入力のぞれぞれの文字を，
対応するSET2の文字に変換します．SET1に無い文字は，そのまま変換されず通過
します．SET1の文字が1回以上現われ，SET2の対応する文字が全て同じではない
場合，最後の1つのみ使用されます．例えば，以下の2つのコマンドは等価です．

     tr aaa xyz
     tr a z

`tr'の一般的な使用法は，小文字を大文字に変換することです．これは多くの方
法で行うことができます．その3つを以下に書きます．

     tr abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ
     tr a-z A-Z
     tr '[:lower:]' '[:upper:]'

`tr'が変換を実行しているとき，SET1とSET2は，通常同じ長さです．SET1がSET2
より短い場合，SET2の終りの余分な文字は無視されます．

一方，SET1をSET2より大きくすることは移植性がありません．POSIX.2は，その
結果は未定義だと述べています．この場合，BSD `tr'は，SET2をSET2の最後文字
で必要なだけ繰り返すことでSET1の長さに引き延ばします．System V `tr'は，
SET1をSET2の長さに切り詰めます．

デフォルトで，GNU `tr'はBSD `tr'のようにこの状態を扱います．
`--truncate-set1' (`-t')オプションが与えられた場合，GNU `tr'はSystem V
`tr'のようにこの状態を扱います．このオプションは，変換以外の処理では無視
されます．

この場合，System V `tr'のように動作させると，比較的一般的なBSDの表現は壊
れます．

     tr -cs A-Za-z0-9 '\012'

それは，全ての英数字を改行に変換する代わりに，(SET1の補語の最初の要素)ゼ
ロバイトのみ変換されるためです．



File: textutils-ja.info, Node: Squeezing, Next: Warnings in tr, Prev: Translating, Up: tr invocation

繰り返しの圧縮と削除
--------------------


`--delete' (`-d')オプションのみ与えられたとき，`tr'は，SET1にあるあらゆ
る入力文字を削除します．

`--squeeze-repeats' (`-s')オプションのみ与えられたとき，`tr'は，SET1にあ
る，それぞれの入力の繰り返される文字の並びを，その文字の単一の発生(訳注：
1つの文字)に置換します．

`--delete'と`--squeeze-repeats'の両方が与えられた場合，`tr'は，最初に
SET1を用いて削除を実行し，SET2を用いて残りの文字から繰り返しを圧縮します．

`--squeeze-repeats'オプションは，変換時にも利用でき，その場合，`tr'は，
最初に変換を実行し，SET2を用いて残りの文字から繰り返しを圧縮します．

ここに，オプションの様々な組合せの表現例をいくつかあげます．


   * 全てのゼロバイトを削除．
          tr -d '\000'

   * 全ての単語を独自の行にします．これは，全ての非英数文字を改行に変換
     し，繰り返される改行となるそれぞれの文字列を単一の改行に圧縮します．
          tr -cs 'a-zA-Z0-9' '[\n*]'

   * 繰り返される改行のそれぞれの並びを，単一の改行に変換します．
          tr -s '\n'

   * ドキュメントで単語の2重の出現を見付けます．例えば，人々は，改行で分
     かれている複製された単語で，"the the"と書くこともよくあります．以下
     のbourneシェルスクリプトは，最初に句読点と空白文字の並びを単一の改
     行文字に変換する動作を行います．それはそれぞれの"単語"を単独行に書
     きます．次にそれは，全ての大文字を小文字に置き換え，最後に，複製が
     隣接している単語のみを出力するために，`uniq'を`-d'オプションで実行
     します．

          #!/bin/sh
          cat "$@" \
            | tr -s '[:punct:][:blank:]' '\n' \
            | tr '[:upper:]' '[:lower:]' \
            | uniq -d





File: textutils-ja.info, Node: Warnings in tr, Prev: Squeezing, Up: tr invocation

警告メッセージ
--------------

環境変数`POSIXLY_CORRECT'を設定すると，POSIX.2を厳密に遵守するため，以下
の警告とエラーのメッセージをオフにします．それ以外の場合，以下の診断が発
生されます．


  1. `--delete'オプションが与えられているが，`--squeeze-repeats'が与えら
     れておらず，SET2が与えられているとき，GNU `tr'は，SET2が使用されな
     いため，デフォルトで使用方法のメッセージを出力し終了します．POSIX指
     定は，この場合SET2は無視されるはずだと述べています．黙って引数を無
     視するのは悪い考えです．

  2. 曖昧な8進数のエスケープが与えられたときです．例えば`\400'は，8進数
     の400の値が単一バイトに適さないので，実際には`0'が後置された`\40'に
     なります．


GNU `tr'は，BSDやSystem Vとの完全な互換性を提供しません．例えば，POSIXの
概念`[:alpha:]'，`[=c=]'と，`[c*10]'の解釈を利用不可にすることはできませ
ん．また，GNU `tr'は，ゼロバイトを保護する方法を提供できない伝統的なUnix
バージョンと異なり，ゼロバイトを自動的に削除できません．




File: textutils-ja.info, Node: expand invocation, Next: unexpand invocation, Prev: tr invocation, Up: Operating on characters

`expand': タブをスペースに変換
==============================


`expand'は，与えられたそれぞれのFILE，または，与えられない場合や`-'の
FILEの場合は標準入力の内容を，タブ文字を適切な数のスペースに変換して，標
準出力に書き出します．概要です．

     expand [OPTION]... [FILE]...

デフォルトで，`expand'は全てのタブをスペースに変換します．それは全ての出
力でバックスペース文字を維持します．それらはタブ計算に対し，列の数を減少
させます．デフォルトの動作は`-8'(タブをそれぞれ8列に設定する) と同じです．

プログラムは，以下のオプションを受け入れます．*Note Common options::,も
参照してください．


`-TAB1[,TAB2]...'
`-t TAB1[,TAB2]...'
`--tabs=TAB1[,TAB2]...'
     1つのタブストップのみ与えられた場合，タブをTAB1個の別々のスペース
     (デフォルトで8)に設定します．それ以外の場合，タブをTAB1，TAB2，...
     (0から番号付けされる)列に設定し，与えられた最後のタブストップ以降の
     あらゆるタブを単一のスペースで置換します．タブストップが`-t'や
     `--tabs'オプションで指定された場合，それらは空白およびカンマで分け
     られます．

`-i'
`--initial'
     それぞれの行の最初のタブ(前にあるものが全て非スペース文字や非タブ文
     字となるもの)をスペースに変換します．





File: textutils-ja.info, Node: unexpand invocation, Prev: expand invocation, Up: Operating on characters

`unexpand': スペースをタブに変換する
====================================


`unexpand'は，与えられたそれぞれのFILE，または与えられない場合や`-'の
FILEに対しては標準入力の内容を，2つ以上のスペースやタブ文字の文字列を，
必要とされる多くのスペースと同等の，続けることが可能な多くのタブに変換し
ながら，内容を標準出力に書き出します．概要です．

     unexpand [OPTION]... [FILE]...

デフォルトで，`unexpand'は，最初のスペースとタブ(前にあるものが全て非ス
ペース文字や非タブ文字となるもの)のみを，ぞれぞれの行で変換します．それ
は，出力でバックスペース文字を維持します．タブの計算に対し，列の数を少な
くします．デフォルトで，タブは8列毎に設定されます．

プログラムは以下のオプションを受け入れます．*Note Common options::,も参
照してください．


`-TAB1[,TAB2]...'
`-t TAB1[,TAB2]...'
`--tabs=TAB1[,TAB2]...'
     1つのタブストップのみ与えられた場合，タブを，デフォルトの8の代わり
     に，それぞれTAB1スペースに設定します．それ以外の場合，タブをTAB1列，
     TAB2列，... (0から番号付けされる)に設定し，与えられたタブストップ以
     降のスペースタブは，変更されずに残ります．タブストップが`-t'や
     `--tabs'オプションで指定された場合，それらは空白とカンマで分けられ
     ます．オプションは暗黙に`-a'オプションを指定します．

`-a'
`--all'
     最初のものだけでなく，全ての2つ以上のスペースやタブをタブに変換しま
     す．




File: textutils-ja.info, Node: Opening the software toolbox, Next: Index, Prev: Operating on characters, Up: Top

ソフトウェア・ツールボックスを開く(Opening the software toolbox)
****************************************************************

この章はもともと`Linux Journal'，volume 1，number 2の`What's GNU?'で記載
されました．それは，Arnold Robbinsによって書かれました．

* Menu:

* Toolbox introduction::        Toolbox introduction
* I/O redirection::             I/O redirection
* The who command::             The `who' command
* The cut command::             The `cut' command
* The sort command::            The `sort' command
* The uniq command::            The `uniq' command
* Putting the tools together::  Putting the tools together




File: textutils-ja.info, Node: Toolbox introduction, Next: I/O redirection, Prev: Opening the software toolbox, Up: Opening the software toolbox

ツールボックスの紹介
====================

今月のコラムは，GNUプロジェクトの周辺に関連するもので，そこでは，Linuxシ
ステム上のGNUツールのいくつかと，それらの使われ方を記述します．それは正
に，プログラム開発と使用方法の"ソフトウェアツール"の哲学です．

ソフトウェアツールの哲学は，初期設計と(LinuxとGNUが本質的に複製している)
Unixの開発では，重要で不可欠な概念でした．不幸にも，インターネットワーキ
ングと派手なGUIの現在の出版では，それは王道からそれてしまっているように
感じられます．それは強力な多くの種類の問題を解決するための精神的なモデル
を提供するので残念です．

多くの人は，ズボンのポケット(またはハンドバッグ)に，スイスのアーミーナイ
フを持ち運んでいます．スイスのアーミーナイフは有用なハンディーツールです．
それはいくつかのナイフの刃，ネジ回し，毛抜き，楊子，爪やすり，栓抜き，そ
しておそらくその他のいくつかがあります．毎日の，単純な汎用のツールが必要
な小さな様々な仕事でおあつらえ向きです．

一方，経験豊富な大工は，スイスのアーミーナイフを使用して家を建てません．
その代わりに，専門的な道具--のこぎり，かなづち，ネジ回し，かんな等がぎっ
しり詰まった道具箱を持っています．そして，それぞれの道具を使用する時と場
所を知っています．ネジ回しを扱いながら，釘を打っているところを見たことは
ないでしょう．

ベル研究所のUnix開発者は，全て専門的なプログラマと訓練されたコンピュータ
科学者です．彼らは，1つのプログラムのみを利用するため，1つで全てに適する
プログラムをユーザに提示する一方，そのようなプログラムは以下のようになる
ことが分かりました．

  a. 書くのが難しい．

  b. 管理とデバックが難しい．

  c. 新しい状況に対し拡張が難しい．

その代わりに，プログラムは専門的なツールであるべきだと感じました．要する
に，それぞれのプログラムは，"1つのことを上手にすべきである"ということで
す．それ以上でも以下でもありません．そのようなプログラムは，設計，作成が
より単純で，正しいものを得られます--ただ1つのことをするだけです．

更に彼らは，良いマシンでプログラムを一緒にハックするため，全体は部分の集
合より偉大なことに気付きました．いくつかの特別な目的のプログラムを組み合
わせることで，プログラムが設計された目的には無い特定の仕事を達成したり，
特定目的のプログラムを書く必要がある場合，より速く簡単にそれを達成したり
できました．我々は，このコラムでこれ以上の，いくつかの(古い)例を見ます．
(重要な追加点は，まだいくつかのアプリケーションがツールボックスに無い場
合，必要があれば回り道して，最初に必要なソフトウェアツールを構築すること
です．)



File: textutils-ja.info, Node: I/O redirection, Next: The who command, Prev: Toolbox introduction, Up: Opening the software toolbox

I/O リダイレクション
====================

希望としては，皆さんが，"標準入力"，"標準出力"，そして"標準エラー出力" 
の特定の概念で，シェルのI/Oリダイレクションの基本に慣れています．要する
に，"標準入力"はデータソースで，データがやってくるところです．データソー
スが，ディスクファイル，キーボード，磁気テープやパンチカードかどうか，プ
ログラムは知る必要も注意する必要もありません．同様に，"標準出力" はデー
タシンクで，データが出て行くところです．プログラムはその場所を知る必要も
注意する必要もありません．標準入力を読み込み，データに何かを行い，それを
送り続けるプログラムは，"フィルタ"と呼ばれ，それは水のパイプラインでのフィ
ルタに似ているためです．

Unixシェルを用いた場合，データパイプラインを設定することは非常に簡単です．

     program_to_create_data | filter1 | .... | filterN > final.pretty.data

我々は生データを作ることから始めます．それぞれのフィルタは，それがパイプ
ラインから出てくるまで，いくつかの連続した変換をデータに適用し，それは望
ましい形式です．

これは素晴らしく，標準入力と標準出力に適しています．標準エラー出力は，動
作中どこに行きますか?  まあ，上記のパイプライン`filter1'について考えて見
てください．データでエラーが発生した場合，何が生じるのでしょう?  エラー
メッセージを標準出力に書き出す場合，それは`filter2'の入力のパイプライン
の下に隠れ，ユーザーはおそらく見ることはありません．そのため，プログラム
はユーザに注意を促すため，エラーメッセージを送ることが可能な場所が必要で
す．これは標準エラー出力で，画面から離れているプログラムの標準出力をリダ
イレクトしてさえ，それは通常コンソールやウィンドウに連結しています．

フィルタプログラムが一緒に動作するため，データの書式は合意されている必要
があります．最も簡単で最も容易な書式は，単なるテキストの行です．通常，
Unixデータファイルは，慣習でUnixの文献で"改行"と呼ばれる，ASCII LF (Line
Feed)文字で分けられた行を用いた，単なるバイトのストリームです．(これは，
Cプログラマの場合は`'\n''です．)これは全ての伝統的なフィルタプログラムで
用いられる書式です．(多くのより早期のオペレーティングシステムは，バイナ
リデータを管理するため，手の込んだファシリティと特別な目的を持つプログラ
ムがありました．Unixは常にそのようなことから身をかわしていて，哲学の下で
は，テキストエディタでデータを見たり編集したりすることを単純に可能にする，
最も簡単な方法です．)

OK，十分紹介しました．いくつかの道具をひと目見て，それから，興味深い方法
でそれらを一緒に束ねる方法を見ましょう．以下の議論では，これらの興味ある
コマンドラインオプションを紹介するだけです．常に行うように，完全な話とす
るために，システムドキュメントを再点検してください．



File: textutils-ja.info, Node: The who command, Next: The cut command, Prev: I/O redirection, Up: Opening the software toolbox

`who'コマンド
=============

最初のプログラムは`who'コマンドです．単独では，それは現在ログインしてい
るユーザのリストを生成します．私はシングルユーザシステムでこれを書いてい
ますが，我々は複数の人々がログインしているふりをします．

     $ who
     arnold   console Jan 22 19:57
     miriam   ttyp0   Jan 23 14:19(:0.0)
     bill     ttyp1   Jan 21 09:32(:0.0)
     arnold   ttyp2   Jan 23 20:48(:0.0)

ここで，`$'は通常のシェルプロンプトで，そこで私は`who'と入力しました．3
人ログインしていて，私は2回ログインしてます．伝統的なUnixシステムでは，
ユーザ名は8文字以上の長さはありません．このわずかな平凡なビットは後で有
用になります．`who'の出力は良いのですが，データは余り面白くありません．



File: textutils-ja.info, Node: The cut command, Next: The sort command, Prev: The who command, Up: Opening the software toolbox

`cut'コマンド
=============

次に我々が見るプログラムは`cut'コマンドです．このプログラムは，入力デー
タの列やフィールドを切り取ります．例えば，我々はそれを用いて，
`/etc/passwd'ファイルからログイン名とフルネームのみを出力させることがで
きます．`/etc/passwd'ファイルは，7つのフィールドがあり，コロンで分かれて
います．

     arnold:xyzzy:2076:10:Arnold D. Robbins:/home/arnold:/bin/ksh

1番目と5番目のフィールドを得るため，以下のように`cut'を使用します．

     $ cut -d: -f1,5 /etc/passwd
     root:Operator
     ...
     arnold:Arnold D. Robbins
     miriam:Miriam A. Robbins
     ...

`-c'オプションを用いた場合，`cut'は，入力行の指定した文字(例えば，列)を
切り出します．このコマンドは，データのフィルタリングに役立ちそうです．



File: textutils-ja.info, Node: The sort command, Next: The uniq command, Prev: The cut command, Up: Opening the software toolbox

`sort'コマンド
==============

次に見るのは`sort'コマンドです．これはUnix形式のシステムで最も強力なコマ
ンドの1つです．自分で良く利用していると思うのは，おしゃれなデータの配管
を設定している時です．`sort'コマンドは，コマンドラインで指名されたそれぞ
れのファイルを読み込みソートします．それはソートされたデータを統合し，標
準出力に書き出します．それはファイルがコマンドラインで与えられない場合，
標準入力から読み込みます(このため，フィルタになります)．ソートは，順序を
正しくするとき文字を基本としたり，ユーザが供給する基準の順番を基本とした
りします．



File: textutils-ja.info, Node: The uniq command, Next: Putting the tools together, Prev: The sort command, Up: Opening the software toolbox

`uniq'コマンド
==============

(少なくとも今のところ)最後に，我々は`uniq'プログラムを見ます．データをソー
トするとき，重複行，すなわち同一行でよく終ります．通常，それぞれの行に1
つのインスタンスが必要です．これは`uniq'を用いる場所です．`uniq'はその標
準入力から読み込み，それはソートされてることを期待します．それは重複行の
1つのコピーのみを出力します．それにはいくつかのオプションがあります．後
に，我々は`-c'オプションを使用し，それはそれぞれユニークな行を出力し，入
力で行が発生した回数の数えたものを前置します．



File: textutils-ja.info, Node: Putting the tools together, Prev: The uniq command, Up: Opening the software toolbox

ツールの統合
============

さて，これが多数のユーザがログインしている大きなBBSシステムだと考えましょ
う．管理者はシスオペに，ログインしているユーザのソートされたリストを生成
するプログラムを書かせたいとします．更に，ユーザが複数回ログインしていて
も，彼または彼女の名前を出力に1度しか表示させないものとします．

シスオペはシステムドキュメントを持って席に付き，これを行うCプログラムを
書いたはずです．それはおそらく，200行のコードを書いて，テストして，デバッ
グするため，2時間かけているでしょう．しかし，ソフトウェアツールボックス
を知っている場合，シスオペは代わりに，ログインしているユーザのリストを生
成することから始めることができます．

     $ who | cut -c1-8
     arnold
     miriam
     bill
     arnold

次に，リストをソートします．

     $ who | cut -c1-8 | sort
     arnold
     arnold
     bill
     miriam

終りに，重複を取り除くため，ソートされたリストを`uniq'に通します．

     $ who | cut -c1-8 | sort | uniq
     arnold
     bill
     miriam

`sort'コマンドには，実際は，`uniq'を行う`-u'オプションがあります．しかし，
`uniq'は，`sort -u'で代用できない他のユーザのためです．

シスオペは，このパイプラインをシェルスクリプトに置き，システムの全てのユー
ザが利用可能にしました．

     # cat > /usr/local/bin/listusers
     who | cut -c1-8 | sort | uniq
     ^D
     # chmod +x /usr/local/bin/listusers

ここで注意すべき主な点が4つあります．最初に，4つのプログラムのみのコマン
ドラインで，シスオペは仕事に費す2時間を節約することができました．さらに，
シェルパイプラインはCプログラムが行うのと同じ効果があり，それはプログラ
マの時間に関してはるかに効果的です．人々の時間はコンピュータの時間よりも
はるかに高価で，現在の"全てのことをする十分な時間が無い"社会では，プログ
ラマの時間の2時間を節約することは，並々ならぬ目ざましい成果です．

2番目に，ツールの*組み合わせ*で，個別のプログラマの著者が想像していなかっ
た特定の目的の仕事をすることが可能だということを強調することも重要です．

3番目に，我々がここで行ったように，ステージ内ででパイプラインを組み上げ
ることも価値があります．これで，パイプラインのそれぞれのステージでのデー
タを見ることが可能になり，それは，これらのツールを全く正しく使用している
ことの確信を得る助けになります．

最後に，シェルスクリプトでパイプラインを組み上げることで，他のユーザがそ
のコマンドを使用することができ，それらを設定したおしゃれな配管を覚える必
要がありません．それを実行する方法という意味では，シェルスクリプトとコン
パイルされたプログラムは区別できません．

ここまでの準備運動の後で，我々は2つの追加のより複雑なパイプラインを見ま
す．そのため，我々が2つのツールをさらに紹介する必要があります．

最初は`tr'コマンドで，それは"transliterate(変換)"を意味します．`tr'コマ
ンドは，文字対文字を基本に，文字を変換する作用があります．通常，それは大
文字を小文字に割り当てることに使用されます．

     $ echo ThIs ExAmPlE HaS MIXED case! | tr '[A-Z]' '[a-z]'
     this example has mixed case!

重要ないくつかのオプションがあります．

`-c'
     リストアップされた文字の補集合で動作し，すなわち，与えられた集合に
     無い文字に適応した処理です．

`-d'
     出力から最初のセットの文字を削除します．

`-s'
     出力で繰り返される文字を1文字に圧縮します．

我々は，一度に3つの全てのオプションを使用します．

我々が見る，もう1つのコマンドは`comm'です．`comm'コマンドは，2 つのソー
トされた入力ファイルを入力データとし，ファイルの行を3列に出力します．出
力列は最初のファイルのユニークなデータ行．2番目のファイルのユニークなデー
タ行，そして，両方に共通なデータ行です．`-1'，`-2'と`-3'のコマンドライン
オプションは，対応する列を削除します．(これは直観的ではなく，慣れるのに
少しかかります．)例えば，以下のようにします．

     $ cat f1
     11111
     22222
     33333
     44444
     $ cat f2
     00000
     22222
     33333
     55555
     $ comm f1 f2
             00000
     11111
                     22222
                     33333
     44444
             55555

ファイル名としての単一のダッシュは，通常のファイルの代わりに標準入力から
読みとるよう，`comm'に伝えます．

さて，我々はおしゃれなパイプラインを構築する準備ができました．最初の応用
は，単語の頻度カウンタです．これは，著者が特定の単語を過度に使用している
かどうかを決定する助けとなります．

最初のステップは，入力ファイルの全ての文字の大文字小文字をどちらか1つに
変換することです．"The"と"the"は数えているときは同じ単語です．

     $ tr '[A-Z]' '[a-z]' < whats.gnu | ...

次のステップは，句読点をを取り除くことです．引用された単語と引用されてい
ない単語は，同一に扱われるべきです．句読点を片付ける最も簡単な方法です．

     $ tr '[A-Z]' '[a-z]' < whats.gnu | tr -cd '[A-Za-z0-9_ \012]' | ...

2番目の`tr'コマンドは，リストアップされた文字の補集合を処理し，それは全
ての文字，数字，アンダースコアと空白です．`\012'は改行を表現します．それ
はそのまま残す必要があります．(ASCIIタブ文字も，生成されたスクリプトでは
追加として含まれるべきです．)

この時点で，我々は，空白スペースで分けられた単語からなるデータを持ってい
ます．単語は英数文字(とアンダースコア)のみ含みます．次のステップは，1行
に1単語となるように，データを別々に分けます．これは数える処理をより容易
にするためで，まもなく見ることができます．

     $ tr '[A-Z]' '[a-z]' < whats.gnu | tr -cd '[A-Za-z0-9_ \012]' |
     > tr -s '[ ]' '\012' | ...

このコマンドは空白を改行に切替えます．`-s'オプションは，出力の複数の改行
文字を1つに圧縮します．これは空白行を避けたいとき助かります．(`>'はシェ
ルの"2番目のプロンプト"を意味します．これは，全てのコマンドを入力し終え
ていないことに注意させるとき，シェルが出力するものです．)

我々は今，1行に1単語で，句読点が無く，全て大文字小文字どちらかだけのデー
タを持っています．我々はそれぞれの単語を数える準備ができました．

     $ tr '[A-Z]' '[a-z]' < whats.gnu | tr -cd '[A-Za-z0-9_ \012]' |
     > tr -s '[ ]' '\012' | sort | uniq -c | ...

この時点で，データは以下のようになります．

       60 a
        2 able
        6 about
        1 above
        2 accomplish
        1 acquire
        1 actually
        2 additional

出力は単語でソートされていて，総数ではありません!  我々が欲しいのは，最
も頻繁に使用される最初のものです．幸い，これは簡単に達成でき，2つの
`sort'オプションの助けを借ります．

`-n'
     文字ではなく，数字のソートを行います．

`-r'
     ソートされた順序を反転します．

最終的なパイプラインはこのようになります．

     $ tr '[A-Z]' '[a-z]' < whats.gnu | tr -cd '[A-Za-z0-9_ \012]' |
     > tr -s '[ ]' '\012' | sort | uniq -c | sort -nr
      156 the
       60 a
       58 to
       51 of
       51 and
      ...

やれやれ!  それは大量の要約です．まだ同じ原則は適用されます．6つのコマン
ド2行で(本当は利便性のため長いものを分けたものです)，我々は興味深く便利
なことを行うプログラムを作成し，それは，Cプログラムで同じことをするもの
を書くよりはるかに短い時間でした．

上記のパイプラインへのちょっとした変更で，単純なスペルチェッカーを与える
ことができます．単語を正しく綴っているかどうかを決定するために行う必要が
あることは，辞書で調べることです．それが無い場合，可能性としては綴りが正
しくないということです．そのため，我々は辞書が必要です．Slackware Linux 
配布物を持っている場合，ファイル`/usr/lib/ispell/ispell.words'があり，そ
れはソートされていて，38,400語の辞書です．

さて，我々のファイルと辞書をいかにして比較するのでしょう?  以前に我々は，
ソートされた，1行に1単語の単語リストを生成しました．

     $ tr '[A-Z]' '[a-z]' < whats.gnu | tr -cd '[A-Za-z0-9_ \012]' |
     > tr -s '[ ]' '\012' | sort -u | ...

さて，必要なことは辞書に*無い*単語リストです．ここが，`comm'コマンドを用
いる場所です．

     $ tr '[A-Z]' '[a-z]' < whats.gnu | tr -cd '[A-Za-z0-9_ \012]' |
     > tr -s '[ ]' '\012' | sort -u |
     > comm -23 - /usr/lib/ispell/ispell.words

`-2'と`-3'オプションは，辞書(2番目のファイル)のみにある行と，両方のファ
イルにある行を削除します．最初のファイル(我々の単語ストリームの標準入力)
のみにある行は，辞書にはありません．これらは綴りエラーに対する好ましい候
補です．このパイプラインは，Unixでのスペルチェッカー製品として，最初に発
生しました．

ちょっと記述する価値のある，その他のツールもあります．

`grep'
     正規表現に一致するテキストをファイルで検索します．

`egrep'
     `grep'に似ていますが，より強力な正規表現を用います．

`wc'
     行，単語，文字を数えます．

`tee'
     データパイプに対するT部品で，データをファイルと標準出力にコピーしま
     す．

`sed'
     ストリームエディタで，より進んだツールです．

`awk'
     データ操作言語で，もう1つのより進んだツールです．

ソフトウェアツールの哲学は，以下の短い助言も含んでいます．"難しい部分は
他人にさせろ"．これは，必要なほとんどのものは与えられるものであり，必要
な形式にするまでの方法が残っていることを意味します．

要約します．

  1. それぞれのプログラムは，1つのことでうまく働きます．それ以上でもそれ
     以下でもありません．

  2. 適切な配管でプログラムを組み合わせることで，全体として部分の総和以
     上の結果を導きます．それは，著者が想像していなかったプログラムの新
     しい使用法も導きます．

  3. プログラムは，決して余分なヘッダや末尾のデータを出力すべきではなく，
     それはこれらがパイプラインを壊してしまうものを送るはずだからです．
     (この点は以前に記述していません．)

  4. 難しいことは，他人にさせましょう．

  5. ツールボックスを理解してください!  それぞれのプログラムを適切に使用
     してください．適切なツールが無い場合，それを構築してください．

ここで書いている我々が議論してきた全てのプログラムは，
`/pub/gnu/textutils-1.9.tar.gz'として，`prep.ai.mit.edu'からの匿名`ftp' 
で利用可能です． (1) (*Note Putting the tools together-Footnotes::)

私がこのコラムで表現したものに新しいものはありません．ソフトウェアツール
の哲学は，最初に，Brian KernighanとP.J. Plaugerによる`Software Tools'の
本(Addison-Wesley, ISBN 0-201-03669-X)で紹介されました．この本は，ソフト
ウェアツールの書き方と使用法を表しています．それは1976年に書かれ，
`ratfor' (RATional FORtran)という名のFORTRANに対するプリプロセッサを使用
しています．当時，Cは現在ほどubiquitousではなく，FORTRANはそうでした．最
後の章で，`ratfor'をFORTRANにするプロセッサを提示していて，`ratfor'で書
かれています．`ratfor'はCに非常に似ています．Cを知っている場合，コードを
追いかけるのに問題ないでしょう．

1981年に本は更新され，`Software Tools in Pascal' (Addison-Wesley, ISBN
0-201-10342-7)として利用可能になりました．両方の本は印刷されていて，プロ
グラマにとっては読む価値があります．それらは，確かにプログラミングを見る
方法で，主な変化をなし得ました．

初めに，両方の本のプログラムはAddison-Wesleyから(9トラックテープで)利用
可能でした．不幸にも，これはもはや利用できず，Internetの周辺でコピーがあ
るかも知れません．何年もの間，活発なSoftware Tools Users Groupがあり，そ
のメンバーは元の`ratfor'プログラムを，FORTRANコンピュータを持つ全てのコ
ンピュータに本質的に移植しました．グループの人気は，Unixが大学を越えて広
がり始めたので，80年代半ばで衰えました．

GNUコードとその他のUnixプログラムのクローンの現在の増殖で，これらのプロ
グラムは，現在ほとんど注目されません．現在のCのバージョンはより効果的で，
これらのプログラムが行うより多くのことを行います．にもかかわらず，良いプ
ログラミングスタイルの博覧会と，still-valuableの哲学に対する福音として，
これらの本は比べるものが無く，私は高く推薦します．

謝辞：私はこのコラムのレビューに対し，ベル研究所のBrian Kernighanと，オ
リジナルのソフトウェアToolsmithに深く感謝したいと思います．


File: textutils-ja.info  Node: Putting the tools together-Footnotes, Up: Putting the tools together

(1) Version 1.9が，このコラムを書いているときの現在のものです．現在のバー
ジョンは，近くのGNUアーカイブを調査してください．主なGNU FTPサイトは，現
在`ftp.gnu.org'です．



File: textutils-ja.info, Node: Index, Prev: Opening the software toolbox, Up: Top

索引
****


* Menu:

* --all:                        unexpand invocation.    39.
* -a:                           unexpand invocation.    39.
* --tabs:                       unexpand invocation.    28.
* -t:                           unexpand invocation.    28.
* -TAB:                         unexpand invocation.    28.
* unexpand:                     unexpand invocation.    5.
* initial tabs, converting:     expand invocation.      37.
* --initial:                    expand invocation.      37.
* -i:                           expand invocation.      37.
* tabstops, setting:            expand invocation.      26.
* --tabs:                       expand invocation.      26.
* -t:                           expand invocation.      26.
* -TAB:                         expand invocation.      26.
* converting tabs to spaces:    expand invocation.      5.
* tabs to spaces, converting:   expand invocation.      5.
* expand:                       expand invocation.      5.
* POSIXLY_CORRECT:              Warnings in tr.         5.
* deleting characters:          Squeezing.              5.
* squeezing repeat characters:  Squeezing.              5.
* translating characters:       Translating.            5.
* equivalence classes:          Character sets.         99.
* xdigit:                       Character sets.         107.
* upper:                        Character sets.         104.
* space:                        Character sets.         101.
* punct:                        Character sets.         98.
* print:                        Character sets.         95.
* lower:                        Character sets.         92.
* graph:                        Character sets.         89.
* digit:                        Character sets.         86.
* cntrl:                        Character sets.         83.
* blank:                        Character sets.         80.
* alpha:                        Character sets.         77.
* alnum:                        Character sets.         74.
* characters classes:           Character sets.         60.
* repeated characters:          Character sets.         52.
* ranges:                       Character sets.         42.
* backslash escapes:            Character sets.         16.
* specifying sets of characters: Character sets.        5.
* tr:                           tr invocation.          5.
* operating on characters:      Operating on characters.  5.
* -j2:                          join invocation.        56.
* -2:                           join invocation.        56.
* -j1:                          join invocation.        50.
* -1:                           join invocation.        50.
* --ignore-case:                join invocation.        42.
* -i:                           join invocation.        42.
* -e:                           join invocation.        36.
* -a:                           join invocation.        31.
* LC_COLLATE:                   join invocation.        11.
* common field, joining on:     join invocation.        5.
* join:                         join invocation.        5.
* --delimiters:                 paste invocation.       29.
* -d:                           paste invocation.       29.
* --serial:                     paste invocation.       22.
* -s:                           paste invocation.       22.
* merging files:                paste invocation.       5.
* paste:                        paste invocation.       5.
* --output-delimiter:           cut invocation.         64.
* --only-delimited:             cut invocation.         60.
* -s:                           cut invocation.         60.
* -n:                           cut invocation.         54.
* --delimiter:                  cut invocation.         49.
* -d:                           cut invocation.         49.
* --fields:                     cut invocation.         42.
* -f:                           cut invocation.         42.
* --characters:                 cut invocation.         33.
* -c:                           cut invocation.         33.
* --bytes:                      cut invocation.         25.
* -b:                           cut invocation.         25.
* cut:                          cut invocation.         5.
* ptx:                          ptx invocation.         5.
* topological sort:             tsort invocation.       5.
* tsort:                        tsort invocation.       5.
* -3:                           comm invocation.        20.
* -2:                           comm invocation.        20.
* -1:                           comm invocation.        20.
* common lines:                 comm invocation.        16.
* differing lines:              comm invocation.        16.
* LC_COLLATE:                   comm invocation.        11.
* comparing sorted files:       comm invocation.        5.
* line-by-line comparison:      comm invocation.        5.
* comm:                         comm invocation.        5.
* --check-chars:                uniq invocation.        82.
* -w:                           uniq invocation.        82.
* unique lines, outputting:     uniq invocation.        76.
* --unique:                     uniq invocation.        76.
* -u:                           uniq invocation.        76.
* all duplicate lines, outputting: uniq invocation.     67.
* --all-repeated:               uniq invocation.        67.
* -D:                           uniq invocation.        67.
* duplicate lines, outputting:  uniq invocation.        61.
* --repeated:                   uniq invocation.        61.
* -d:                           uniq invocation.        61.
* --ignore-case:                uniq invocation.        55.
* -i:                           uniq invocation.        55.
* --count:                      uniq invocation.        49.
* -c:                           uniq invocation.        49.
* --skip-chars:                 uniq invocation.        41.
* -s:                           uniq invocation.        41.
* +N:                           uniq invocation.        41.
* --skip-fields:                uniq invocation.        31.
* -f:                           uniq invocation.        31.
* -N:                           uniq invocation.        31.
* uniquify files:               uniq invocation.        5.
* uniq:                         uniq invocation.        5.
* sort zero-terminated lines:   sort invocation.        158.
* -z:                           sort invocation.        158.
* sort field:                   sort invocation.        150.
* -k:                           sort invocation.        150.
* uniquifying output:           sort invocation.        144.
* -u:                           sort invocation.        144.
* field separator character:    sort invocation.        135.
* -t:                           sort invocation.        135.
* overwriting of input, allowed: sort invocation.       129.
* -o:                           sort invocation.        129.
* reverse sorting:              sort invocation.        130.
* -r:                           sort invocation.        130.
* LC_NUMERIC:                   sort invocation.        110.
* numeric sort:                 sort invocation.        110.
* -n:                           sort invocation.        110.
* LC_TIME:                      sort invocation.        103.
* months, sorting by:           sort invocation.        103.
* -M:                           sort invocation.        103.
* unprintable characters, ignoring: sort invocation.    99.
* -i:                           sort invocation.        99.
* general numeric sort:         sort invocation.        81.
* -g:                           sort invocation.        81.
* case folding:                 sort invocation.        76.
* -f:                           sort invocation.        76.
* telephone directory order:    sort invocation.        71.
* phone directory order:        sort invocation.        71.
* -d:                           sort invocation.        71.
* blanks, ignoring leading:     sort invocation.        67.
* -b:                           sort invocation.        67.
* LC_CTYPE:                     sort invocation.        57.
* TMPDIR:                       sort invocation.        53.
* LC_COLLATE:                   sort invocation.        28.
* merging sorted files:         sort invocation.        24.
* -m:                           sort invocation.        24.
* checking for sortedness:      sort invocation.        18.
* -c:                           sort invocation.        18.
* sorting files:                sort invocation.        5.
* sort:                         sort invocation.        5.
* sorted files, operations on:  Operating on sorted files.  5.
* operating on sorted files:    Operating on sorted files.  5.
* verifying MD5 checksums:      md5sum invocation.      77.
* --warn:                       md5sum invocation.      77.
* -w:                           md5sum invocation.      77.
* text input files:             md5sum invocation.      70.
* --text:                       md5sum invocation.      70.
* -t:                           md5sum invocation.      70.
* verifying MD5 checksums:      md5sum invocation.      58.
* --status:                     md5sum invocation.      58.
* binary input files:           md5sum invocation.      27.
* --binary:                     md5sum invocation.      27.
* -b:                           md5sum invocation.      27.
* message-digest, 128-bit:      md5sum invocation.      5.
* fingerprint, 128-bit:         md5sum invocation.      5.
* checksum, 128-bit:            md5sum invocation.      5.
* 128-bit checksum:             md5sum invocation.      5.
* md5sum:                       md5sum invocation.      5.
* CRC checksum:                 cksum invocation.       5.
* cyclic redundancy check:      cksum invocation.       5.
* cksum:                        cksum invocation.       5.
* System V `sum':               sum invocation.         34.
* --sysv:                       sum invocation.         34.
* -s:                           sum invocation.         34.
* BSD `sum':                    sum invocation.         26.
* -r:                           sum invocation.         26.
* checksum, 16-bit:             sum invocation.         5.
* 16-bit checksum:              sum invocation.         5.
* sum:                          sum invocation.         5.
* --max-line-length:            wc invocation.          61.
* -L:                           wc invocation.          61.
* --lines:                      wc invocation.          55.
* -l:                           wc invocation.          55.
* --words:                      wc invocation.          49.
* -w:                           wc invocation.          49.
* --chars:                      wc invocation.          43.
* --bytes:                      wc invocation.          43.
* -c:                           wc invocation.          43.
* total counts:                 wc invocation.          11.
* line count:                   wc invocation.          5.
* word count:                   wc invocation.          5.
* byte count:                   wc invocation.          5.
* wc:                           wc invocation.          5.
* summarizing files:            Summarizing files.      5.
* --quiet:                      csplit invocation.      107.
* --silent:                     csplit invocation.      107.
* -q:                           csplit invocation.      107.
* -s:                           csplit invocation.      107.
* --elide-empty-files:          csplit invocation.      93.
* -z:                           csplit invocation.      93.
* --keep-files:                 csplit invocation.      87.
* -k:                           csplit invocation.      87.
* --digits:                     csplit invocation.      80.
* -n:                           csplit invocation.      80.
* output file name suffix:      csplit invocation.      66.
* --suffix:                     csplit invocation.      66.
* -b:                           csplit invocation.      66.
* output file name prefix:      csplit invocation.      60.
* --prefix:                     csplit invocation.      60.
* -f:                           csplit invocation.      60.
* splitting a file into pieces by context: csplit invocation.  5.
* context splitting:            csplit invocation.      5.
* csplit:                       csplit invocation.      5.
* --verbose:                    split invocation.       50.
* --line-bytes:                 split invocation.       42.
* -C:                           split invocation.       42.
* --bytes:                      split invocation.       35.
* -b:                           split invocation.       35.
* --lines:                      split invocation.       29.
* -l:                           split invocation.       29.
* output file name prefix:      split invocation.       14.
* pieces, splitting a file into: split invocation.      5.
* splitting a file into pieces: split invocation.       5.
* split:                        split invocation.       5.
* --verbose:                    tail invocation.        154.
* -v:                           tail invocation.        154.
* --silent:                     tail invocation.        148.
* --quiet:                      tail invocation.        148.
* -q:                           tail invocation.        148.
* --lines:                      tail invocation.        140.
* -n:                           tail invocation.        140.
* --max-unchanged-stats:        tail invocation.        127.
* --max-consecutive-size-changes: tail invocation.      117.
* --pid:                        tail invocation.        102.
* --sleep-interval:             tail invocation.        97.
* --retry:                      tail invocation.        90.
* descriptor follow option:     tail invocation.        55.
* name follow option:           tail invocation.        55.
* growing files:                tail invocation.        55.
* --follow:                     tail invocation.        55.
* -f:                           tail invocation.        55.
* --bytes:                      tail invocation.        48.
* -c:                           tail invocation.        48.
* +COUNT:                       tail invocation.        40.
* -COUNT:                       tail invocation.        40.
* BSD `tail':                   tail invocation.        17.
* last part of files, outputting: tail invocation.      5.
* tail:                         tail invocation.        5.
* --verbose:                    head invocation.        55.
* -v:                           head invocation.        55.
* --silent:                     head invocation.        49.
* --quiet:                      head invocation.        49.
* -q:                           head invocation.        49.
* --lines:                      head invocation.        41.
* -n:                           head invocation.        41.
* --bytes:                      head invocation.        34.
* -c:                           head invocation.        34.
* -COUNT:                       head invocation.        26.
* first part of files, outputting: head invocation.     5.
* initial part of files, outputting: head invocation.   5.
* head:                         head invocation.        5.
* parts of files, output of:    Output of parts of files.  5.
* output of parts of files:     Output of parts of files.  5.
* --width:                      fold invocation.        41.
* -w:                           fold invocation.        41.
* --spaces:                     fold invocation.        33.
* -s:                           fold invocation.        33.
* --bytes:                      fold invocation.        26.
* -b:                           fold invocation.        26.
* screen columns:               fold invocation.        14.
* folding long input lines:     fold invocation.        5.
* wrapping long input lines:    fold invocation.        5.
* fold:                         fold invocation.        5.
* --page_width:                 pr invocation.          278.
* -W:                           pr invocation.          278.
* --width:                      pr invocation.          267.
* -w:                           pr invocation.          267.
* --show-nonprinting:           pr invocation.          261.
* -v:                           pr invocation.          261.
* --omit-pagination:            pr invocation.          254.
* -T:                           pr invocation.          254.
* --omit-header:                pr invocation.          242.
* -t:                           pr invocation.          242.
* --sep-string:                 pr invocation.          227.
* -S:                           pr invocation.          227.
* --separator:                  pr invocation.          216.
* -s:                           pr invocation.          216.
* --no-file-warnings:           pr invocation.          209.
* -r:                           pr invocation.          209.
* left margin:                  pr invocation.          200.
* indenting lines:              pr invocation.          200.
* --indent:                     pr invocation.          200.
* -o:                           pr invocation.          200.
* --first-line-number:          pr invocation.          193.
* -N:                           pr invocation.          193.
* --number-lines:               pr invocation.          174.
* -n:                           pr invocation.          174.
* --merge:                      pr invocation.          161.
* -m:                           pr invocation.          161.
* --length:                     pr invocation.          152.
* -l:                           pr invocation.          152.
* --join-lines:                 pr invocation.          142.
* -J:                           pr invocation.          142.
* output tabs:                  pr invocation.          134.
* --output-tabs:                pr invocation.          134.
* -i:                           pr invocation.          134.
* --header:                     pr invocation.          124.
* -h:                           pr invocation.          124.
* --form-feed:                  pr invocation.          116.
* -f:                           pr invocation.          116.
* -F:                           pr invocation.          116.
* input tabs:                   pr invocation.          106.
* --expand-tabs:                pr invocation.          106.
* -e:                           pr invocation.          106.
* double spacing:               pr invocation.          100.
* --double-space:               pr invocation.          100.
* -d:                           pr invocation.          100.
* --show-control-chars:         pr invocation.          92.
* -c:                           pr invocation.          92.
* across columns:               pr invocation.          84.
* --across:                     pr invocation.          84.
* -a:                           pr invocation.          84.
* down columns:                 pr invocation.          69.
* --columns:                    pr invocation.          69.
* -COLUMN:                      pr invocation.          69.
* --pages:                      pr invocation.          57.
* +FIRST_PAGE[:LAST_PAGE]:      pr invocation.          57.
* merging files in parallel:    pr invocation.          5.
* multicolumn output, generating: pr invocation.        5.
* printing, preparing files for: pr invocation.         5.
* pr:                           pr invocation.          5.
* --width:                      fmt invocation.         67.
* -w:                           fmt invocation.         67.
* -WIDTH:                       fmt invocation.         67.
* --uniform-spacing:            fmt invocation.         58.
* -u:                           fmt invocation.         58.
* --split-only:                 fmt invocation.         50.
* -s:                           fmt invocation.         50.
* tagged paragraphs:            fmt invocation.         42.
* --tagged-paragraph:           fmt invocation.         42.
* -t:                           fmt invocation.         42.
* crown margin:                 fmt invocation.         35.
* --crown-margin:               fmt invocation.         35.
* -c:                           fmt invocation.         35.
* Plass, Michael F.:            fmt invocation.         18.
* Knuth, Donald E.:             fmt invocation.         18.
* sentences and line-breaking:  fmt invocation.         18.
* line-breaking:                fmt invocation.         18.
* text, reformatting:           fmt invocation.         5.
* paragraphs, reformatting:     fmt invocation.         5.
* reformatting paragraph text:  fmt invocation.         5.
* fmt:                          fmt invocation.         5.
* formatting file contents:     Formatting file contents.  5.
* --traditional:                od invocation.          176.
* -x:                           od invocation.          170.
* -o:                           od invocation.          166.
* -l:                           od invocation.          162.
* -i:                           od invocation.          158.
* -h:                           od invocation.          154.
* -f:                           od invocation.          150.
* -d:                           od invocation.          146.
* -c:                           od invocation.          141.
* -b:                           od invocation.          137.
* -a:                           od invocation.          133.
* --width:                      od invocation.          134.
* -w:                           od invocation.          134.
* --output-duplicates:          od invocation.          126.
* -v:                           od invocation.          126.
* type size:                    od invocation.          98.
* --format:                     od invocation.          70.
* -t:                           od invocation.          70.
* string constants, outputting: od invocation.          62.
* --strings:                    od invocation.          62.
* -s:                           od invocation.          62.
* --read-bytes:                 od invocation.          55.
* -N:                           od invocation.          55.
* --skip-bytes:                 od invocation.          46.
* -j:                           od invocation.          46.
* file offset radix:            od invocation.          25.
* radix for file offsets:       od invocation.          25.
* --address-radix:              od invocation.          25.
* -A:                           od invocation.          25.
* file contents, dumping unambiguously: od invocation.  5.
* ASCII dump of files:          od invocation.          5.
* hex dump of files:            od invocation.          5.
* octal dump of files:          od invocation.          5.
* od:                           od invocation.          5.
* --number-width:               nl invocation.          143.
* -w:                           nl invocation.          143.
* --starting-line-number:       nl invocation.          136.
* -v:                           nl invocation.          136.
* --number-separator:           nl invocation.          129.
* -s:                           nl invocation.          129.
* --no-renumber:                nl invocation.          123.
* -p:                           nl invocation.          123.
* rz format for `nl':           nl invocation.          120.
* rn format for `nl':           nl invocation.          116.
* ln format for `nl':           nl invocation.          112.
* --number-format:              nl invocation.          108.
* -n:                           nl invocation.          108.
* blank lines, numbering:       nl invocation.          99.
* empty lines, numbering:       nl invocation.          99.
* --join-blank-lines:           nl invocation.          99.
* -l:                           nl invocation.          99.
* --page-increment:             nl invocation.          93.
* -i:                           nl invocation.          93.
* --header-numbering:           nl invocation.          87.
* -h:                           nl invocation.          87.
* --footer-numbering:           nl invocation.          81.
* -f:                           nl invocation.          81.
* section delimiters of pages:  nl invocation.          72.
* --section-delimiter:          nl invocation.          72.
* -d:                           nl invocation.          72.
* --body-numbering:             nl invocation.          50.
* -b:                           nl invocation.          50.
* footers, numbering:           nl invocation.          17.
* body, numbering:              nl invocation.          17.
* headers, numbering:           nl invocation.          17.
* logical pages, numbering on:  nl invocation.          12.
* line numbering:               nl invocation.          5.
* numbering lines:              nl invocation.          5.
* nl:                           nl invocation.          5.
* --separator:                  tac invocation.         39.
* -s:                           tac invocation.         39.
* --regex:                      tac invocation.         30.
* -r:                           tac invocation.         30.
* --before:                     tac invocation.         24.
* -b:                           tac invocation.         24.
* reversing files:              tac invocation.         5.
* tac:                          tac invocation.         5.
* --show-nonprinting:           cat invocation.         91.
* -v:                           cat invocation.         91.
* -u:                           cat invocation.         85.
* --show-tabs:                  cat invocation.         81.
* -T:                           cat invocation.         81.
* -t:                           cat invocation.         75.
* squeezing blank lines:        cat invocation.         69.
* --squeeze-blank:              cat invocation.         69.
* -s:                           cat invocation.         69.
* --number:                     cat invocation.         62.
* -n:                           cat invocation.         62.
* --show-ends:                  cat invocation.         55.
* -E:                           cat invocation.         55.
* -e:                           cat invocation.         49.
* --number-nonblank:            cat invocation.         43.
* -b:                           cat invocation.         43.
* binary and text I/O in cat:   cat invocation.         25.
* --binary:                     cat invocation.         25.
* -B:                           cat invocation.         25.
* --show-all:                   cat invocation.         19.
* -A:                           cat invocation.         19.
* copying files:                cat invocation.         5.
* concatenate and write files:  cat invocation.         5.
* cat:                          cat invocation.         5.
* entire files, output of:      Output of entire files.  5.
* output of entire files:       Output of entire files.  5.
* version number, finding:      Common options.         23.
* --version:                    Common options.         23.
* help, online:                 Common options.         18.
* --help:                       Common options.         18.
* common options:               Common options.         5.
* bugs, reporting:              Introduction.           12.
* POSIX.2:                      Introduction.           10.
* introduction:                 Introduction.           5.
* utilities for text handling:  Top.                    5.
* text utilities:               Top.                    5.



